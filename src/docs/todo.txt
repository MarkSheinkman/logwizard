- article about event viewer - title: view Windows Event Logs can be fun
  - note: i will briefly mention outputdebugstring
  - explain about editing Description pane , etc.
  -- tidbits : about finding (what gets selected), about Description control, about copying records from event viewer
   - ask about what people would want in such a logviewer
   - find: about the fact that if searching for something, if not in the columns in View, is shown as slightly darker
   - find: allow searching in all columns


	










#10 - bug: sync colors - when sync with all logs -> then when showing all lines -> they will shown with the colors from the other views

#11 - bug: C:\Users\meeee\AppData\Local\PokerStars.EU\PokerStars.log.0 : The process cannot access the file 'C:\Users\meeee\AppData\Local\PokerStars.EU\PokerStars.log.0' because it is being used by another process.
  - basically if i try to open this log while PS is running, i will constantly get this, and the LW log will fill up needlessly

#12 - bug: after user makes a color filter -> clear selection, so that his new color filter takes place instantly (********in the smart edit)





#14 - find: have a "To Filter" button (good when doing regex search)
  - two possibilities -> Apply to existing Lines, Apply to Full Log
    + select Color/Match Color/default color?
	-- make this rather generic, so that later i can add more attributes if needed (this is also used in right-click)


- tip cp: allow only a class to access some functions
  - q: can i make this available on several classes?
     -- does it really work? can another class misuse it?
  - explain why : normally, you have a class just be private, or the class be inside another class
  - have lock class derive from lock_base<> so that i can just say some_class.lock ??
  - example: parser, text_reader -> there should be at most one parser per text_reader - text_reader created first TOTHINK is this a good example?
  - explain : easiest way: to just pass a variable of your type as argument. however, what if i just pass null? can i just say it should be NonNull?




     





#15 - allow column formatters 
This should basically work for both the view and the details pane (for instance, an xml msg could be shown in a friendly manner)
But for now, I may want to print several lines into one?

Column formatters should be allowed to have context (and eventually have settings based on which they do the formatting)
- for instance, i could specify, in settings -> what colors to apply to the text
- they need to be applied in such a way that they can add/modify colors of the text itself (or bold/italic etc.)
- Tuple<int,int,print_info> -> needs to become a class, so that i can deal with it in an easier fashion
    -- need to be able to easily iterate through all "prints" -> like in description_ctrl.show_sub_item (to make generic)





#8-aliases should be able to use in filters (***lo-case-no-space probably)
	- in filters - i should be able to use - the column name or the friendly-name-locase-no-space
	--> i already have the function to convert alias -> lw-columnname (to_logwizard_column_name)
	 -- see when i can resolve these names (as soon as aliases is loaded???)


#16 - option: if a line doesn't match any logging syntax -> assume it's from previous line 
  (keep it in the context?; probably - yes)
  probably only for line-by-line files

#17 - look around - when typing + or when ctrl-f -> this should be configurable (right now, 100 for typing, 1000 for ctrl-f)

#18 - allow more complicated expressions 

#19 allow to easily TAIL (so that for large files, really useful)
- allow showing new lines with a different color (when monitoring real-time)
  perhaps an image in the Line column - to think about when to stop showing it (like, perhaps after it's been seen once???)
- allow turning off real-time (toggling it)

#20 - allow "reverse" (so that I see the latest as first)









#21 For non-line, non-time, not-msg columns (VERY COOL TO HAVE)
- allow "snoop around", have something that looks like "show dropdown"
- this is basically an extremely easy filter for that column - it shows the unique values surrounding maybe 1000 lines or so  (perhaps allowing selecting unique values from all lines? - probably 50K should be enough) 
- allow snooping in all lines as well if the user wants to
- for each unique value - show how many lines match it
- this will be shown really nice and small exactly matching the [width] of the column
- selecting any row will filter by that -> allow converting that to filter
- show in status pane -> that we're filtering by that (allow ESC to toggle the filter off?)






#22 - level column -> allow transforming it into pictures
- this should work on any column - we should be able to transform any context into picts
- there should be 2 ways: to picture, to text + picture (when to-picture only -> take a lot less space(width))







#23 - bug: toggling enabled/dimmed will end up causing exceptions - seems it's because of all the forced reloads


#24 - bug: When using rewritefile - using the C:\john\code\buff\win10-3\TableNinja2.log.7.rewritten.log -> writing 100 items at once, when they are added to a view that has no filters
the line ending in 98 is sometimes not written fully (doing a refresh fixes the issue)
i think the problem is that i'm reading a partial line and matching against that - very likely i should not include the last line until some time has passed or fully read





#25 - smart edit (lo priority): 
- allow synchronizing what i type-search with full log (that is, show in both current view and full log) 
- both ways, from current view to full log and back
- allow synchronizing full log - match color with current view













































- threads - allow showing threads in parallel - based message id - if too many threads, allow choosing which threads to show - sorted by absolute time
  - this should basically be by assigning a color to each thread's BACKGROUND. Then update the background for each line accordingly
    say we have 3 threads: one, two, three and assign to them : red, green, yellow
	we will have an extra column (perhaps the thread column anyway) what will divide itself into the number or different colors (3)
	then, based on this, it will show one of the 3 in a certain color (red, green, yellow) - each of the different colors will get a different slot
	then, 
	- the background of EACH line will update to a ligher version of the given thread color (like red -> very light red)
	- whenever a line is selected, all the lines from the same thread will be shown on a slighly darker background than usual (like red -> light red)
	   - same thing happens when the line is selected in the "threads" pane 
	    - TOTHINK how many shades of the given color i should have - since it's the normal color, then selected color, then other lines of the same color
		- also perhaps, have a way to toggle the "thread colors" on/off - so that i can have these colors even if the threads pane is off.
	- once i select a color (allow for common colors as well)
	  - if another thread has the same color -> change the other thread's color
	+ save everything the user selects (colors, how he categorizes) - TOTHINK how?
	- article: LogWizard - Threading can be easy - Thread Filters
	 ------- also, explain that you can toggle:
	           - on only currently shown thread (from view) 
			   - only current shown thread (from full log) 
			   - everything (from full log) + everything (from view) 
			   - which is the view itself






- alert -> allow showing a msg, beep, etc. when a certain msg is found
  for instance "same scrape" -> show a message when that happens
  or, when "overridden theme" gets written (for alerts - force refresh of the view all the time)
  by default -> the alert would show the message itself + perhaps beep?
  alerts - to be also shown in a left pane (as a new tab)
  when an alert happens -and it actually matches the current view - just show the alert sign (no need to show the message itself since the user already sees it)
  --------> when an alert happens, show it in the line number as an "!" icon - also, all views that contain an alert should have the "!" icon
  --------> checkbox - beep on alert + checkbox - bring LogWizard to top on alert
  ----- i should look for an alert in all the filters (in other words, maybe two filters match a line -> the first filter gives the color; but maybe the second one matches the alert)

  -> alerts - allow an alert to stop the program (have setting: alerts : break into code, default = yes).
     in this case, I need to create a special logger (that writes to shmem). then, use signals - after each log, we wait until the "alert" filters have been run
	 if an alert triggers (one that should be on - if "break into code" is turned off, then an alert must be specifically set to "break"),
	 then we stop the program. otherwise, the program continue
	 in our program -> we first run the 'alert' filters that can break (synchronously) - if anything matches, we signal this. otherwise, we allow the original program
	 (the one being debugged), to continue.
	 (note: see if it's easier to monitor for console)
	 note: when writing to shmem, the log pattern should match what you would write the the file.
	 (shmem -> have a setting - how to identify the beginning of hte program - like, a specific message gets written -> restarts logging)

  - new article (about monitoring your own log while debugging) + "bring to top/most on alt-tab"? "Logging and Debugging - they can get along"

  - alert: email? later = command line client that would monitor a certain log? and just do alerts? (include the msg?)
    - cmd line args: [type-of-log] [log-name]
	- allow dumping one of hte views?
	- TOTHINK when should we dump an email? by default, probably not. maybe only on the command line client?
	- later: in time, allow for this to be very thin (memory-wise), since we don't need to remember the matches - we only need to dump alerts, if needed
	- cmd line client should also be able to dump a certain view into another file (.txt or .html); this way, you might run it on Test results?
- logging article??? c# - like, when to log, what to log, logging libs (log4net,nlog), performance, async logging
  show that you can easily write to shmem (show example, in the way of OutputDebugString)
  allow saving sessions
  the other article:
  -> the outputdebug string will be shown on "alerts" (perhaps two articles: one about break into debug, one about alerts - perhaps tips?)
     i will create a function similar to what outputdebugstring does (just have a way to name the "wait" mutex in any way so that several apps can use it)
	 --> so, if something is set at the end of the function -> we will break into debug mode
	 --> create a wrapper for it for log4net
	 -------- alerts: should i allow sending an email? probably later, when ran unattended





- column formatters
  - this surely deservest its own article. have some simple script where i can have them
  - also, have a way to script them and automatically save them so that they can be reused






- preview mode 
  - in this mode, we only load part of the file, like, first 50K lines or so
  - also, we stop monitoring for new lines (so we don't interfere with the view/filter creation process)
  - when toggling ON/OFF - show in status (as WARNING), that we're in Preview or not
  - in preview mode, filters will run a LOT faster
    - allow setting the preview mode - how many lines, from where (beginning or end, or half begging half end)
  - when it's a large file, and we don't have any filters, dump a warning
    - by default, on large files, we should automatically toggle preview-mode ON (setting "Auto toggle preview mode on new files larger than X")
  - first and last lines in PREVIEW mode should be something like "YOU ARE IN PREVIEW MODE"
    - so that the user is instantly aware of it
  - Preview mode is on a file-by-file basis (not context-dependent)
  - *** article about it?



