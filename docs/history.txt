








- search ahead (the next 100 rows - on the same column)

- click on a word - if user doesn't leave that place for a while (like, 750ms), we should mark that word!

1.2.5n
- fix: small bug - on_edit_sel_changed sometimes not called


1.2.5m
- if pressing a char and we're at the end of a word, automatically add space
  - first, search for char appended to text - if nothing found, but adding ' ' and the char finds something, go there
- type space in middle of word + no selection -> select that word
- esc - clear selection
- bksp - one char before (if space last char, delete that too)


1.2.5l
- fix: the selection of edit box a bit darker : now selection is correct (sel_start_ + sel_end_) 
  + can select in both directions (used to be able to work only to the right)


1.2.5k
- the selection of the edit box - make it a bit darker than what already shown
- using richtextbox now


1.2.5j
- smart text box: handles scrolling (from the scroll bar)
- alt->arrow - works


1.2.5h
- using SPACE instead of F2 (f2 already used in bookmars)


1.2.5g
- tested edit mode:
	Always - We're always in Edit mode. Cursor is always visible
	With F2 - Use F2 to toggle Edit mode ON/OFF
	With Right Arrow - turn the Edit mode ON. Move to another line, and it will be turned OFF
- IMPORTANT:
  when in edit mode, ctrl->arrows does not work

- in lw application : f2 does NOT work


1.2.5e
- navigation keys work - all of them (arrows/pgup/pgdown/home/end)
 - special cases: home/end - if at home (selectionstart=0) -> go home (first item)
                           -if at end (selectionstart=endofline) -> go end (last line)


1.2.5d
- several fixes when handling navigation keys
- bug: if for a cell my selection start is bigger than len + i navigate to that cell +  press left-arrow:
  it will navigate to cell on its left, instead of going one char to left.


1.2.5c
- fix: todo: handle click -> go directly to letter on click


1.2.5b
- handle clicking on a cell
- handle background + foreground of the smart edit


1.2.5a
- handling navigation keys in log_view - so that i update the smart edit box.


1.2.4b
- removed keys_debug - added by mistake


1.2.4
- moved log_view into lw_common, so I can easily test it


1.2.3
- updated logwizardsetupsample
- generated new public release


1.2.1
- before updating main article on codeproject


1.1.25
- logSyntaxCtrl - made read-only. It will always point to the syntax we've found for the current log, and the user can't change that.
  - if the user sets a certain syntax, it will be applied to *the whole context*.
    The idea is that it doesn't make any sense to have two different files from the same context have different syntax.
	Even if theoretically that would happen, you can still have an extra choice: file-to-syntax. You'll just add an entry that 
	finds the syntax based on something found in the file header.
done:
- on new file (that does not match any context)
  - we will create a context matching the name of the file (if one exists, we will automatically select it)
  - by default, we'll never go to the "Default" context
  - the idea is for the uesr not to have to mistakenly delete a context when he's selecting a different type of file,
    (since he would want new filters). thus, just create a new context where he can do anything
  - contexts - case-insensitive (when file -> context)
  - syntax: if current context does not have any, use the one the user has set for this log
- syntax: when changed -> refresh everything (even syntax!)
- test syntax : "Use it" -> if the context did not have a default syntax(= invalid syntax) -> use it also
- at app start - delete empty contexts


1.1.24b
- added small article on github about syntax


1.1.24a
- syntax: allow testing 
  - take from existing file
  - if default syntax -> show in red + show the "sourrce pane" + show error in status pane


1.1.23
- finally, managed to supress ctrl-tab/ctrl-shift-tab (so that we use ctrl-leftarrow/ctrl-rightarrow to navigate amongst tabs)
  - probably i could have used ProcessCmdKey all along
    anyway, I will probably keep ctrl-tab/ctrl-shift-tab for navigating between existing logs (in case the user has several logs open)
- allow resizing left pane (and auto-save it)


1.1.22
- bug: render: when choosing background and item not selected -> if bg != white -> use that (test with marking some lines as bookmarks)


1.1.21
- suspend/resume layout - so that thee's no bad flickering
- fix: bug: on release settings -> the left pane is shown too low (very likely - if shown from the beginning)
- removed load_location - we don't need it anymore
- fix: bug: logsetupsameple -> after shown after setup, next time, it's still shown (the former log should be shown on re-run)



1.1.20
- copy to clipboard - html also
  - write status -"text copied to clipoard, as text and html"
- small bug: when enforcing the selection (select_idx) - if i'm on the last visible line - i should actually bring it to middle (since last visible line usually means partially visible)
  (not tested)


1.1.19d
- fix: bug: real time monitoring does not scroll to end
- change ctrl-c / ctrl-shift-c (should be the other way around)


1.1.19c
- got fixed: bug - drag drop new file (first time) - full log shows empty?
- filter: ctrl-enter would save
- updated rewrite app to test with lines


1.1.19b
- fix: if a view that is not the first view was selected, it would show all log (first time)
- creating new filter (+) - new / copy


1.1.19a
- moved load/save of contexts inside the log_wizard_serializable_classes file



1.1.18c
- before several fixes


1.1.18b
- renaming filter - the name text box is too big - overrides +/-/etc. buttons
  - make sure the dark bg is not visible, when renaming filter (put light-colored panel below)
tested
- bug: sometimes filter is not saved when exiting curFilter
  - i don't think i get notified when edit control loses focus which fucks things up'
    - i think the issue happens only when i navigate with tab
	- also, when the column is not selected, curFilter should be disabled
  [NOTE] I think i saved this, but need to properly retest


1.1.18a
- todo: retest creating a new filter (copy of existing) - does not seem to work correctly
 - (creating a new filter) sometimes it shows pretty much nothing - works quite badly


1.1.17
- added possibility to copy to clipboard as html as well


1.1.16
- fix: unnecessary refresh of views
- bug - clicking on a line in a view -> need to update notes line
- bug - interpret up/down etc. keys correctly on notes-crtl (now they move through the current view)
- bug - typing in notes list flickers the full-log (even when pressing Alt key????) - perhaps from my keydown/up handlers???????
- bug - when the view changes -> udpate notes
- bug - sometimes we don't draw correctly - it seems to happen especially if I click another tab with the mouse
- default: don't use gradient


1.1.14
- option to toggle hotkeys off
- context matches -> in settings dialog (easy, for now)
- syntax matches -> in settings dialog (easy, for now)
 


1.1.13c
- created toggles wiki page
  - extra menu : What's this - goes to toggles wiki page


1.1.13b
- toggles menu works
- right-clicking the bug to show the toggles menu works


1.1.13a
- toggles menu works


1.1.12
- history: now show friendly names
- history: for imported/zip files, I show the friendly name


1.1.11
- drop zip files: works
- shift-drop zip files: works


1.1.10
- looked at the competition again. all I can say is LOL
- dropping zip files seems to work correctly; need more testing


1.1.9
- saving to html works like a charm (test_export)
- saving notes to .txt and .html
- saving current view to .txt and .html - works


1.1.8
- opening .logwizard files works as expected (even if double clicked in Windows Explorer)


1.1.7
- passing arg to another logwizard instance
  - SEEMS TO WORK, but the order in COPYDATASTRUCT is wrong


1.1.5f
- merging notes: now works seamlessly
- if has merged notes -> go to notes


1.1.5e
- forced context:
  if i manually change the context for a file, we'll always use that! (forced_file_to_context_)
Done:
- import (import_notes):
  _notes.txt -> merge - if don't find the local notes -> dump an error msg
  _context.txt - parse
    - if new context name + it also contains a log file, import and use
	- if context exists, or there is no file, ignore (means i already have the file locally)
  log-file
    - if i have it locally, i don't care
	- if i don't have it locally, add it to some "local_dir\imported" location and keep it there (preserve the name)


1.1.5d
- import (import_notes):
  importing works, but it does not care about context and friendly names yet
- showing status: if error, show it even if it was hidden
- showing status: show visually that it's an error


1.1.5c
- md5-fast - don't include file name
- on new log file -> reload notes
- allow toggling notes (show_note) alt-n
- clicking the eyedropper - works
- ctrl-c / shift-ctrl-c -> if in edit box, we should not do anything
- todo: tab/shift-tab - care about the notes ctrl (if only cur note selected -> ignore notesctrl)
- associate with .zip and .logwizard extensions 

done:
- export (alt-e) + "Export" button -> export 2 files TOTHINK what to put there:
  (long)
  _notes.txt
  _context.txt - the current context: first line - context name, remaining: (as if copied to clipboard)
  the-log-itself
  (short)
  _notes.txt
  _context.txt - the current context: first line - context name, remaining: (as if copied to clipboard)
  --> create a temp dir, create the two zip files, then remove temp dir
  open it in explorer, select the (long) one



1.1.5b
- md5 - fast -> include file name+size
- now we can get from a file to its notes (no matter what the md5 method, or where the file is from (if not local, that is))
- in settings: disabled "By File Name" - it's pretty dangerous to use, and until I document it better, I don't want people to use it


1.1.5a
- md5 - computing md5 : fast/slow/by file name - they all work correctly


1.1.4
- small improvements on the colors


1.1.3v
- show merged lines with different background - works
- coloring of notes: works (still todo - clicking no eyedropper)


1.1.3t
- merging: works AWESOMELY

DONE:
- (note_user_ctrl) notes: author (in Settings) - by default, username
  - show the author username when toggled into notes + specify a color for author (by default, blue)
    - when showing the other authors, if an author name's color colides with ours, make sure we use something unique (even if several collisions)
  - allow deleting/UNdeleting notes, even from others (basically, we will HIDE it; hidden notes, if shown, show in ligthtgray) 
    - have a checkbox - show Hidden Notes (by default, unchecked)
  - render: the author, bold -> in author's color , the text in the color wanted by the author
  - when typing a note: first line ( # color) - can specify the color (to make it simpler)
- notes: 
  - allow of editing the notes you're creating
  - selecting a note: if mine -> i edit. if another one's, i'm replying
- allow notes - on any line even if bookmark or not
  - clicking on a note - will take you there - notes are prefixed by username (by default, its the windows username)
  - several people can comment on a line
  - clicking on a note: 
    - see if i have the view where the note was made, and if i have the line. if so, i will go there, in that view (since i may be using my own context)
	- otherwise, go to first view where the note is found, if not found anywhere, open full log and go there
  - notes should be abe to have colors (like - green OK, red BAD, gray ACCEPTED, stuff like that)
    - note color != author color!


1.1.3s
- merge - notes for lines that don't have any notes from me are appended to the end
          (that should not happen)


1.1.3r
- fix: allow editing your own notes
- test: replying works awesome (small fixes)


1.1.3p
- retested deleting: works
- tested with notes from 3 people - works (except for replying; replying not tested)
- fixes (worked on 1.1.3o):
  - show/hide deleted notes
  - colors and such


1.1.3o
- fix: bug: clicking outside the notes control on a line would gray out all notes


1.1.3n
- fix: bug: when on a valid note from me, instead of "Edit note" i see "Reply to..."



1.1.3m
- author colors: compute them - care only about the current author's color; the rest - select from predefined list


1.1.3k
- author colors we have unique colors for each author, even if they clash


1.1.3j
- set color fg/bg, updated font - looks pretty awesome


1.1.3i
- solved some bugs: adding works correctly now, and tested delete - seems to work
- "Show Deleted Notes" - note fully tested


1.1.3h
- using GUIDs for line_id/note_id - so that merging will be extremely easy


1.1.3g
- before converting line_id/note_id to GUIDs


1.1.3f
- deleting notes - works (when "show deleted notes disabled")


1.1.3e
- BEFORE: new idea for deleting notes - mark the note(s) as deleted, then recreate the UI


1.1.3d
- load/save works
- synchronizing note to views / views to note works
- saving done correctly (sorted by line)


1.1.3c
- note_ctrl - more testing/bug fixing


1.1.3b
- small note_ctrl improvements - add_note tested a bit


1.1.3a
- small note_ctrl improvements - NOT tested


1.1.2
- made it easy to test the filter_ctrl in test_ui, solved minor bugs
  - still need to retest starting a context from scratch (TN2ScrapeFind)


1.1.0
- work on notes_ctrl (not finished)
- add new context for TN2


1.0.92
- made and tested setup kit


1.0.91h
- moving filter_ctrl into lw_common - step 4 (fully done and tested)
- done:  test that we're always synchronized currnetview-filter_ctrl (on tab change -> update filter_ctrl)
- refreshing color from a filter (with eyedropper) -> instant update


1.0.91g
- compiles - need to properly set the filter_ctrl delegates


1.0.91f DOES NOT COMPILE
- BEFORE filter_ctrl have filter_item point directly to ui_view

- moving filter_ctrl into lw_common - step 3
- done: to erase 
  private void focusOnFilterCtrl_Tick(object sender, EventArgs e) {



1.0.91e
- moving filter_ctrl into lw_common - step 2
  (solved font bug)


1.0.91d
- moving filter_ctrl into lw_common - step 1


1.0.91c
- refactoring: names in lw_common should be in lw_common namespace


1.0.91b
- refactoring - moved some UI code into lw_common
  rationale: I want to be able to test parts of the UI separately (like, the control I'm about to do: notes_ctrl)


1.0.91a
- sheletron (filter_ctrl on test_ui)


1.0.90
- added notes ctrl (scheletron)


1.0.89
- notes: author name, initials + color ->  in settings
  - the author has 2 names - the name + a short name, since we will be showing his shot name in discussions (by default, it's he user's initials -> we compute them as he's changing his name)
- zip extensions -> in settings
- cool color selector in filter - it updates the correct line (if another color was selected) or adds a new line with the color



1.0.88
- https://github.com/jtorjo/logwizard/wiki/Filters
- added color picker (http://www.codeproject.com/Articles/21965/Color-Picker-with-Color-Wheel-and-Eye-Dropper)
- settings -> general / color / Imp/Exp (+ Reset button) / notes
- no more need for update_line_highlight_color



1.0.87
- custom renderer - right now, we can draw custom words/phrases/etc. with different fonts, bold, etc. (list_view_render)
  we need to make it so that we can match anything a filter or a find matches


1.0.86
- added + tested sharpzip - ****awesome lib****


1.0.85
- side effect, of course, everything is smoother, and loads faster, since we don't need to reload matches on the main thread
  (they are loaded in the filter' tread)

- decrease memory footprint - step 11
	- log_view: remove usages of list.GetItemCount()
	- log_view: remove usages of GetItem() - always check for null
	- fix the "needs to scroll to last"


- another possible memory optimization for large files (for much later, probably)
  - load the file in chunks. for each chunk, parse the lines, and then run ALL the filters on that specific chunk of lines
    load another chunk, parse lines, run all filters, and so on.
	this way, we keep very little in large_string (except for line indexes)
	then, when specific lines are asked (for display) - load them from HDD, with some simple caching mechanism
	possible problem - if file is not Unicode-16 or Ascii, we need to match the line index to a specific position in the file
	                   this will probably mean a totatly new large_string class, that would internally keep bytes
					   also in text_file_reader -> in that case, we could pass to large_string -> the bytes themselves (with encoding as well)
  - having said that, this would probably be useful only on 3-4GB+ files (since those could indeed take a lot of memory)
    - for such large files, i may even add an option: pause/resume loading


1.0.84c
- log_view and filter share the matches list
  - on the 90Mb file /64bit - improvement - takes 915-920Mb, used to take aprox 1Gb, so improvent of about 9%
  - on the 280Mb file/64bit - improvement - takes 2340Mb instead of aprox 2750Mb, so improvement of about 15%


1.0.84a
- removed filter.match_indexes_


1.0.83e
- update hotkeys page (mayber online?)- explain toggles in document - so that I can send to Denise.
  - yes, made help page online


1.0.83d
- msg only -> show the line + msg (at this time, i only show msg)
  - save it for EACH view + full log
  - full log: should toggle between line+msg / line+view+msg / everything


1.0.83c
- keeping the ui_info in the context itself seems to make no sense - it quite complicates things - we already keep the position info outside (default_ui_, context_ui_)


1.0.83b
- ' ' toggle between enabled/dimmed in the filter (if on a filter row)
- + - <-V-> etc - buttons should override the header (if the header is visible!)
  - small bug: if both header and views are hidden, the buttons are placed wrongly


1.0.83a
- optimization: filter -> when a filter row is modified / added / or deleted -> I should check exactly that -> so that when updating rows -> reuse what has not been modified
  - bug: move up/down -> sometimes it does not update the "Found" column - also, sometimes it's not updated at all (we should care when filter moved up/down/top/bottom)
    (whe should i recompute "Found" column?)
- if editing a filter row, don't update the filter until the user has gone away from it
- home/end/esc/' '/enter - should work correctly when history dropdown shown
- history dropdown: closing the dropdown -> move focus away from history
  - if title hidden - show it partially
      - ctrl-h -> should show history - if the title is toggled off, just bring the history part to visibility, and then hide it back
  tested, actually, I don't need to show it - dropping teh Dropdown will show all the items in the history, which is exactly what we want.


1.0.82
- udated saving/toggling positions - made MUCH EASIER
  
- Saving/Toggling positions
	  the "position" now encompases: 
	  - application position + size
	  - whether app was maximized or not
	  - last selected view
	  - last selected row
	  - full log splitter position
	  - all toggles

  By default, you're in the "Default" position (you can also call it, position zero). Anything you do is automatically saved.
  At any time, you can switch to another to another position (1 to 5).
  To switch to another position, press Ctrl-1 to Ctrl-5. 
  To switch back to the default position (position zero), just press the hotkey again.

  When going to position 1-5:
  - if you're going there for the first time, the existing position is copied. This works even if
    you're in another position. 
	So, if you're going to position 2, and you were in the default position, the default position is copied into position 2.
	If you're going into position 2 from position 1, the position 1 is copied into position 2.

	From there on, anything you do is saved within this position.
	To go back to the default position, just press the Ctrl-(1 to 5) hotkey again.



1.0.81
- Saving/Toggling positions (+ toggles)
  the "position" now encompases: 
  - application position + size
  - whether app was maximized or not
  - last selected view
  - last selected row
  - full log splitter position
  - all toggles

  Ctrl-Shift-1 to Ctrl-Shift-5 
  - saves the position
  
  Ctrl-1 to Ctrl-5 
  - toggles the position (from the default position to a customly-saved position and back)
  - you can also toggle from one customly-saved position to another customly saved position
  - whenyou are in a Customly-saved position, any change you make to the position is ignored
    (so if you're in position 3 and toggle Title OFF, next time you will toggle to position 3, the Title will be ON;
	 if you make some changes to the position, and want them to update, just re-save the position; 
	 in our case, you would just re-press Ctrl-Shift-3)

  Ctrl-Shift-0
  - marks the current position as the "Default" (which you can automatically tweak further)

  Ctrl-0
  - goes to the position saved by Ctrl-Shift-0
  - remains in "Default" position (does not go into a "Custom" position)
    what this means, is that any changes you make further on, are saved as the "Default" position.



1.0.80j
- fix: small bug: if switch from one custom location to another custom location, it does not work correctly


1.0.80i
- done:  what if on a custom location , changed something and want to resave
- small bug: if switch from one custom location to another custom location, it does not work correctly


1.0.80h
- everything saved correctly - toggling to/from different locations works correctly
- still todo:  what if on a custom location , changed something and want to resave 


1.0.80g
- still bug when hiding tabs and title


1.0.80f
- select line - saved + restored correctly


1.0.80e
- selected view - saved correctly


1.0.80d
- position + maximized + full-log-splitter-distance - saved correctly


1.0.80c
- Esc - if message details is shown - hide it
- refactored the UI-toggles code, to allow for sets of locations/sizes/toggles - NOT complete


1.0.80b
- find - case-insensitive + full words + regex (by default, auto-detect -> [],(),any\ -> regex)
- new default: synchronize colors - with all


1.0.80a
- changed toggle hotkeys - so that they are not single chars (without modifiers like Alt/Ctrl/Shift)
  - due to feedback: the user should not by mistake press a key while in LogWizard and not understand what happens (i.e., freak out)
  - former hotkeys now are Alt-[former_hotkey]; example : toggle filter - Alt-F
- show/toggle status: works (Alt-S)
  - new hotkey for toggling source pane (Alt-O)
- status: just show the file + length, just to show something there, for now
- alt-'s' - toggle status (info about the file/current view - like, file size, number of lines, how many lines the last Find matched; when loading a file -> write status about it)
  - setting a status - either for a number of seconds (after we we get to the previous one), or indefinitely (clears previous queue)
  - what about source pane? what hotkey for it - - alt-o


1.0.79
- allow selecting several rows
- allow resetting the default settings (for Denise)


1.0.77
- toggle 'v' - show/hide view + 'h' show/hide header
  - global - they apply to all views
- show_full_log() -> split into two things -> show_full_log / show_current_view (both can't be off at the same time)
- all toggles are saved into current context (except "show msgonly")
- fix bug: toggle full log -> when pressed ('l') in full-log, it's pressed twice
- history - deleted files - ignore them
- synchronizing with full-log/other logs -> if key is down (up/down/etc.) -> don't sync yet TOTHINK (basically so that we only synchronize when the user has selected the final row)


1.0.76h
- after generated 32 and 64 setup kits

- Decrease memory - final step TODO:
  - log_view has an array of items (_model), which basically are on top of matches_
    I guess we can actually get rid of log_view.item, and embody it match_ - I do have to think about it big time
	I should also think about the fact that I may want to toggle the results of a view + search-in-view (but that should be fine,
	I would just go through the original filter, and do my search, create a copy of the array, with the search; now that i think about it,
	i could even keep another array with the results of a search - if no search, just an empty array; this should also work for when selecting a filter -> which would show the
	results of that filter; at this point - I can easily find out the number of matches to hold)
  - match_indexes_ -> the only time I actually use this is when adding an addition via BinarySearch
    - since i already have binary_search myself, I should look into that 
	  (also - my search returns the closest item; i should see if that is the right place to do an Insert).


1.0.76g
- decrease memory footprint - step 10

- full log : matches computed on the fly (instead of an extra array, which also meant huge delays when we changed the current view)
- full log : computing synchronized colors on the fly - much faster, and using less memory
- one last run of dotmemory - all that is found is ok - no point in sacrificing stuff for more memory increases

- Conclusion at this point:
  - at some point I said that 32-bit occupied mem is about the same as 64-bit. I was wrong (see 1.0.76e)
  - x64 version will take about 40% more memory (due to 8-byte pointers)
  - due to memory improvements, I also got some speed improvements
  - 280Mb file loads only on 64-bit - it takes about 2.5Gb of RAM (with full log shown); note: it has 3M lines
  - 280Mb raises exception on 32-bit (out of memory)
  - 90Mb file takes <600Mb on 32-bit . This is HUGE improvement (initially, it took close to twice as much)
  - I really see no more possible improvements at this point without sacrificing something else (very likely, speed and simplicity)
  **** note: the reason the 280Mb and 90Mb files take so much memory is because many of the lines match in a quite a few filters,
       and I had a LOT of views;
       thus, we end up creating a lot of objects. It's very likely that on some of your huge files that won't be the case, and
	   loading a file of this size would take much less memory and cpu


1.0.76f
- the 280Mb file loads in 2.53Gb of RAM

1.0.76e
- apparently, my Release64's actual platform was x86 instead of x64


1.0.76d
- decrease memory footprint - step 9
  - read full log first - apparent 10% less memory consumed (on 90Mb file)


1.0.76c
- decrease memory footprint - step 8
  - done all I said in 1.0.75
  - note: basically the memory itself did not drop by much, ***however***, I did minimize the posibility of an out-of-memory exception 
    due to memory fragmenting


1.0.76b
- fix bug at filter.add_addition_line (not tested)


1.0.76a
- decrease memory footprint - step 7
  - added memory_optimized_list
  - BEFORE making 'filter' - matches member into a list (instead of dictionary)


1.0.75
- decrease memory footprint - step 6
  - removed gcConcurrent="false" (http://stackoverflow.com/questions/1267611/net-is-there-a-way-to-change-the-gc-behavior-for-the-entire-machine)
  - allow creating huge objects on x64 (http://www.centerspace.net/blog/large-matrices-and-vectors/)
  - added gcServer enabled="true" (http://content.atalasoft.com/h/i/58213870-choosing-the-right-garbage-collector-settings-for-your-application-net-memory-management-part-4)

- tried loading the full log first, then refreshing filters, this made things worse (filter.compute_matches_impl) - crash even with full log off

- notes: 
  - on 280 Mb file, I still got outofmemory exception when showing full log
  - perhaps a system restart could help
  - since i've updated the above (in app.config), we crash on the huge file

******** possible further improvements
   -stringbuilder -> set its capacity (since we know the size of the original file)
     - also, force a gc.collect level 3 ?
   http://blogs.msdn.com/b/vsofficedeveloper/archive/2008/10/10/stringbuilder-outofmemoryexception.aspx
   - full log -> set capacity of _model to the number of lines
   - have a connection pool of List<T>. then, when items are added, ensure we have the space for them, and we reuse them constantly
     - have a minsize for the number of items (at which, this should start happening)
	 - i should use this on all List<list_view.item> and filter.match?


1.0.74c
- decrease memory footprint - step 5
 - loaded 90Mb file , takes 640Mb instead of 1084Mb (1.0.66) = when showing full log
 - loads 280 Mb file - takes 1170Mb when not showing full log; when full log is shown, it crashes (outofmemoryexception)

******** possible furher improvements: 
  - some of the objects could be created on the stack - like: 
    - log_line_parser.read_to_line (List<line> now)
	- filter.compute_matches_impl (new_matches, new_match_indexes)
	  - here, I could tweak with .Capacity ?
	- log_view.update_view_column (matches)
	- maybe 'match' could be made a struct? careful - not sure if i assume it's pased by value - however, this should be immutable
	  - note : this might actualy backfire, because there are plenty of places holding a match
  - large_string -> indexes_ -> maybe enlarge its capacity as we add new lines? 
    (like, 20% or so - only when needed; have a ratio of: number of lines / existing-string -> thus, get the average line length;
	 then, based on that, we should see if we need to increase indexes_' capacity )
  - filter - matches_ dictionary could become a list - not sure if this would yield that much of an improvement though

  - another possibly big improvement: the line should not keep a reference to the large_string
    - every request for a part of a line would need to send the large_string reference as well
	- this can also backfire, because in list_view.item, we would need to keep a reference to either the large_string, or the parent
	  so very likely no gain would be achieved
	  - the more I think about, the more I think this would bring unnecessary complexity, with very small gains, if any
	    (like, if we move the ref to large_string from line into filter.match, we will end up having more references to large_string,
		 since we can have more matches than lines - if several filters match the lines -> so, not a good idea)


1.0.74b
- decrease memory footprint - step 4 
  - using BitArray instead of bool[]
  - further testing
  - fixed bug from 1.0.74a - works as expected now

Notes:
- I initially thought that compiling as 32-bit would save us quite a lot of memory - this does not seem to be the case.
- memory "bottlenecks" are:
  - line class - not much can be improved about it
  - filter.match - probably a small improvement could be achieved by making filter_line.font_info a struct - however, i don't think it's worth my time at this point
  - *** log_view.item 
    - i could create a class derived from item, for the full-log only -> which would keep the parent_ and matched_logs (note: done: in 1.0.74c)


1.0.74a
- decrease memory footprint - step 3 - large_string now holds the whole string, and the lines point into it
  - rationale: dotmemory found a LOT of small strings
  - IMPORTANT: there is a BUG - at huge files, some lines are missed (huge1.txt - we miss two lines)
    (very likely, we consider they are part of existing lines and append to them)
	also, it's likely that I access some lines before they are fully read (like, a line was partially read) - and i don't treat that correctly

- managed to successfully load 280Mb file - we occupy about 1.1Gb - which is quite decent (older version just crashed)


1.0.73
- decrease memory footprint - step 2 (loaded 90Mb file , takes 515Mb instead of 811Mb (1.0.66))

1.0.72b
- decrease memory footprint - step 1


1.0.72a
- toggling full log -> make sure we focus on a view, so that we don't end up having focus on a hidden control
  - bug: toggle full log -> when pressed ('l') in full-log, it's pressed twice
         note : this did not exist on 1.0.71


1.0.71b
- updated setup kit so that some HM3 log views are there by default


1.0.71
- fix: deal with big files (_test1.HoldemManager.Import.test.txt) -> do profiling
  synchronizing with other views - use binary search


1.0.70b
- deal with homogeneous logs (hm3 files -> several syntaxes)


1.0.70a
- synchronize colors : full log - synchronize with what the existing tab has and/or with all tabs? 
  (Sync: with current tab / with all tabs / none)


1.0.69
- fix - drop one file onto logwizard; then drop another -> press ctrl-f -> the find window is shown behind our window (our window was made topmost somehow?)
  as soon as i drop something -> our window becomes topmost?


1.0.69a
- apply to existing lines
- when changing tab (view) -> we update the filterctrl - we also need to clear curFilterText + applytoexistingfilters


1.0.68
- fix: bug - full log no longer rightly synchronized with current view


1.0.67
- fix: "refresh" -> should clear the existing filter's cache -> so that it updates
  test: go from '\breading\b' 
	-> remove the case-sensitive, then refresh
	-> add it back, then refresh
- added Open in Explorer command (Ctrl-O)
- open with LogWizard - for .log and .txt files
- send to logwizard - for ay file
- fix: on file rewrite (bring to top on restart) 
  -> make sure to navigate to last line!
- fix: on file rewrite (bring to top on restart) 
  -> done: see if i can bring to top+topmost without gaining focus
- help/goto/find/etc - all other forms - if parent is topmost, make topmost as well (othewise they would be covered by parent)


1.0.66
- filters now can match regexes as well. in fact, by default, they work as regexes. If you say:
  $[part-of-line] some-regex-expression, it works as regex.
  Example:
  $msg \breading\b
  - will match all lines containing the word 'reading'
- settings file - save settings in such a way that I can add regexes (namely, don't escape multiple lines the way i used to)
- filter friendly names -> just add a line (anywhere) thta starts with '## ' 
- show the filter in background pink if it's an invalid one
- when you edit the filter, and set the color ('color XXX' line), it will visually show the color


1.0.65
- made logwizard run as invoker again (rationale: now, that i made logwizard run as admin, i can't drop files onto it)
  tested: "bring to top on restart" works as expected


1.0.64
- support non-ascii encodings
- adjust time of lines that could not be parsed
- allow time that uses : as millis separator
- auto recognized msi log files
  - at this time, non homegeneous lines are considered 'just message'
- fix: auto update msg details when toggling
- fix: when filters pane shown, msg details should not override it


1.0.62
- made the icon much smaller


1.0.61
- fix: test on deleted settings file (we used to have problems)


1.0.60
- added application manifest, to request admin credentials -> for topmost to work correctly (still did not work)
- fixed setting topmost - forcing it via win32 messages


1.0.58
- toggle topmost - allow showing even if title is shown as well
- fix: filter buttons not shown properly
- settings by file - easy to have settings by file (bring to top on restart/make topmost no restart)
- bring to top on restart - works as expected, but when another app is full-screen, 
  sometimes TopMost=true is ignored


1.0.57
- toggle topmost works - via button (only when title is not shown)


1.0.56e
- 'T' - toggle title (remove border + lower pane)
- by default -> don't sync views (for large files -> it's slow')


1.0.54
- f5 = refresh
- generate the release build as x64 by default
- whenever something is added - to a view that is not current, show visually (bold) that there are new items there


1.0.52
- go to line/time
  - allow even goodies like +4s and such


1.0.51c
- fix: bug -> sometiems changnig the file stops refresheshing the existing view - probably because of wait_for_filter_to_read_from_new_log_


1.0.51b
- export to clipboard/import from clipboard for filters/full-context
- initial version of settings
- Monitor TN2 - if present (%appdata%\tn2)
- Refresh button - moved next to history


1.0.51a
- filter row: Move to Top / Move To Buttom
- resize log wizard: update message details
- key down - in edit -> don't have it as hotkey


1.0.50
- sync all views to existing view - force all views to go to the closest line 
- show the number of lines in teh tab + show when it changes
  WEIRD BUG: in order for logs to be in sync, i need to go with ctrl-=> to each log. then, they will end up in sync as i change the items


1.0.49
- done, works: check if monitoring the same file - and that file gets rewritten -> everything should go from zero
- updated TableNinja context


1.0.47
- monitoring a file - don't hold _fs internally - so that the other program can write to it
- change icon
- fix: bug when chaning files - now no crash, but some info is not updated


1.0.46
- fix: bug when changing log files 
- tested very big file (280Mb) - works on x64
- msg_details: match the color of the line you're showing details for


1.0.45
- initially added and tested on github


1.0.44
- efficiency : filter is thread-safe
- note: made filter disposable, but at this time we don't need it


1.0.42
- efficiency: reading the log_line_parser / log_line_reader : on their own thread


1.0.41
- efficiency: reading the file on a different thread - doubled the speed (for 32Mb log file)


1.0.40
- working on efficency - small improvement - line.part() does not take a substring of the line


1.0.39
- the last selected item from history -> move to last, so that next time we auto-open it


1.0.38
- made the Filters - into a pane (with several tabs) - I'll allow having several extensions later (like, Allow filtering by thread/context)
- several hotkeys - if focus on edit, they should not work
- allow case-insensitive filters
- allow filtering for "contains any/none"


1.0.37
- clearer UI hints when a certain view becomes active (like, when you within panes with Tab/Shift-tab)
- allow de-synchronizing existing log with full log (until now they were in sync)
- toggle Full Log - allow toggling: view/both/full-log-only


1.0.36
- letter hotkeys - should not work when focus on edit

1.0.35
- +/- hotkeys - increase/decrease font
- m - just the log messages (without the time/etc.) - this applies only to the current view 
(so for instance if full log is present as welll, it would only apply to the current view)
- ctrl-up/down for log, just like it's in notepad++


1.0.34
- setup sample - shown correctly, added SetupSample filters, in order to be shown correctly at setup


1.0.33
- handle showing the setup sample - when running setup
  more importantly, making sure that the setup sample is added to the history, and when shown again, it will care about
  its position in history (by default, we load the last log)
- when setup kit is run, we wait for it to end and then show the setup sample


1.0.28
- tab / shift-tab - work
- up/down arrows - if history dropdown or focus in filters ctrl (filter list/cur filter), do normal behavior
- h - toggle history dropdown (after the dropdown closes, focus back to last known pane)
- ctrl-n - new window
- ctrl-s - settings
- updated help form


1.0.27b
- tooltip - not shown on msg column, the msg_details is shown instead when needed


1.0.27a
- fixed the "tooltip" - made it as control instead of a form (msg_details_ctrl)


1.0.26
- added About form
- added: if current line is too big to show (thus, we would need a tooltip),we can show it as an edit box (or label), behind the line TOTHINK perhaps we would want to turn this off at times?
  show this either at the bottom or at the top (by default, at the bottom)
  HOWEVER It does not FUCKING work. I'm too nervous to investigate - it constantly steals focus from the log wizard - which should NOT happen.


1.0.25
- added Debug64/Release64 configs. Note: on valerie/TableNinja2.log.5 -> it generates on exception on Release64, but no exception on Release
- ctrl-c - copy to clipboard (only the msg) ; ctrl-shift-c - copy full line
- bookmarks work


1.0.24
- extra column on Fulllog -> shows the views where a line was found. Also, updates based on which view is selected


1.0.23d
- selecting a filter -> marks all lines containing that filter + allows doing f3/shift-f3


1.0.23c
- log view made as ownerdrawn, so that i can specify UnfocusedHightlight color
- saving last search (text/bg/fg)


1.0.23b
- ctrl-f/esc/f3/shift-f3 work correctly


1.0.23a
- hotkeys: action hotkeys (up/down/pgup/etc) if full-log is selected, they should apply to it
- fix: - bug: in full-log, control keys are interpreted twice (such as pgup/pgdn etc)
- ctrl-f/Esc work - basically, we override the fg + bg


1.0.22
- initial settings page (shows hotkeys/tips)
- scheletron for finding text


1.0.21
- added GNU v3 licensing


1.0.20
- as the file is appended to, all the filters update correctly (same for the "full log")
fixes:
- apparently - teh full log is not correctly refreshed as more info is written to it (windows 8/10)
- windows 10: apparently we don't update in time as file is refreshed


1.0.19
- Home key works


1.0.18
- tooltip only if text bigger than col width
- Filter "-" - select something after deletion
- refresh button on the filter: done: not fully tested, seems to work though
- font names: by default fixed width
- previewkeydown/up -> allow global hotkeys


1.0.16
- tested log being constantly appended to/rewritten : works now


1.0.15
- added LogWizardSample file
- refactored log_to_default_context/syntax
- recognize Sample file
- recognize TN2 debug files


1.0.14
- initial tests of log being constantly appended to/rewritten work


1.0.13c
- moved file_text_reader code into simple_file_text_reader
- moved log-syntax related code into find_log_syntax


1.0.13b
- file_text_reader -> make sure pos_ is ulong


1.0.13
- added rewritelogfile - to test logwizard as a file gets rewritten


1.0.11
- added version to the title


1.0.10
- update log columns based on whether they are empty or not


1.0.9
- HM2 syntax recognized correctly
- HM3 syntax recognized correctly


1.0.8
- tooltip on view_log line -> show the full line


1.0.7
- setup kit + release mode - keep settings in roaming dir


1.0.6
- allow having the "All" view -> and allow toggling it, and keeping it in sync with active tab.


1.0.5
- implemented additions
- on addition -> gray the original color
- test history (changing files)
- changing the file -> does not automatically update


1.0.4
- remember "toggle" settings
- updated tooltip for "Filter"
- partially implemented additions


1.0.3
- using virtuallist
- refrences to log4net/objectlistview via nuget
- virtuallist works so far


1.0.2
- starting to work - several filters work correctly


1.0.1
- roughtly, UI is ready - need to actually read logs and apply filters
done:
+ deleting a mid-view -> need to update all filters! (since they are kept by indexes)
+ adding a view -> copy all filters from existing view!
+ adding a view -> add it AFTER the existing one (in TabPages)
+ adding a view -> select it
