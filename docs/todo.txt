
- synchronize colors : full log - synchronize with what the existing tab has and/or with all tabs? 
  (Sync: with current tab / with all tabs / none)
  when synchronizing -> specify how to show unsynchronized lines (like, darkgray?)

- synchronizing with full-log -> if key is down (up/down/etc.) -> don't sync yet TOTHINK (basically so that we only synchronize when the user has selected the final row)

- history - deleted files - ignore them

- allow selecting several rows

- move up/down -> sometimes it does not update the "Found" column

- alert -> allow showing a msg, beep, etc. when a certain msg is found
  for instance "same scrape" -> show a message when that happens
  or, when "overridden theme" gets written (for alerts - force refresh of the view all the time)
  by default -> the alert would show the message itself + perhaps beep?
  alerts - to be also shown in a left pane (as a new tab)
  when an alert happens -and it actually matches the current view - just show the alert sign (no need to show the message itself since the user already sees it)
  --------> when an alert happens, show it in the line number as an "!" icon - also, all views that contain an alert should have the "!" icon
  --------> checkbox - beep on alert + checkbox - bring LogWizard to top on alert
  ----- i should look for an alert in all the filters (in other words, maybe two filters match a line -> the first filter gives the color; but maybe the second one matches the alert)



- settings page: 
  - font for showing the message (like, Courier New?)
  - default color for "Include text"
  - show column "Filter(s)" on full log (it takes more time to synchronize)
  - colors for bookmarks
  - if to add "*" to the tab title when something changed -> this forces refresh of all  tabs all the time

- find - case-insensitive + full words

- while the log is changing or the view is loading or so -> visually show that we're loading (like, in the view name -> show rotating "...")

- bug - sometimes refreshing clears the current view (and the view remains cleared) - clicking it a few times will make it work again, but it's not cool

- bug - log_line_parser.line_at can actually cause assertion -> i should be able to handle the case when line_at returns null (and 'matches' should return false in that case)

- level column -> allow transforming it into pictures



- how easy is it to draw with custom font, or on special color?

- allow editing the message (basically just for copying text) + allow "Exclude [text]" + "Include [text]" (on the Full log)
  -probably listen for keys -> listen for left or right arrow (and start moving cursor from there)
  -> another context menu -> "To Color" -> which converts lines containing that text to a given color

------------- talk with Vidi
- threads - allow showing threads in parallel - based message id - if too many threads, allow choosing which threads to show - sorted by absolute time
- allow copy-paste of full-log into a cloud
- allow saving a certain view as a text file (.txt or .html)
- file:line -> allow showing the actual source code , eventually integrate with visual studio, 
  eventually think about root folder / and allow overriding it to your own
  integrate with github/bitbucket for open source projects? - look for api from github/bitbucket for retrieving files
  
- live monitoring: maybe allow monitoring a condition, and somehow alert the user
- find: allow showing only the lines that matched the find condition (toggle)
- in visual studio -> if i'm at file:line -> go into logwizard and see what messages were written at this file:line -> create a view with those lines or something like that

- find -> convert to a filter 

---------------

- decrease memory footprint - probably for ascii-encoded files, we can assume we don't need to always keep the byte buffer (file_text_reader)

- at some point: all commands should be available via menu - which should be turned on/off



allow bolding or changing font or color or whatever of certain words/phrases
like, color=red for all "could not" text

- (low) log_line_parser.read_to_end - normally, when a line is incomplete and reparsed, we should reapply filters on it, because the line might have become complete now,
  thus, some filters might match now. however, it's not a big deal - normally logs should be flushed correctly (several lines at a time)



allow bolding or changing font or color or whatever of certain regexes?
like, in the message - if X matches Y -> mark it in a certain color or so.
case in point -> [time.stats] -> numbers -> if too big -> mark them in given color
---- at beginning, do this simple, like "match [time.stats] $number ms". Then, allow $number comparisons, like , $number > 100 => color something

