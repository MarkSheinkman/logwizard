- toggle 'v' - show/hide view + 'h' show/hide header
  - global - they apply to all views










- synchronizing with full-log/other logs -> if key is down (up/down/etc.) -> don't sync yet TOTHINK (basically so that we only synchronize when the user has selected the final row)

- history - deleted files - ignore them

- optimization: filter -> when a filter row is modified / added / or deleted -> I should check exactly that -> so that when updating rows -> reuse what has not been modified

- find - case-insensitive + full words + regex

- allow selecting several rows

- history: for each file -> remember the last view (maybe the row(s) as well?, toggles?)

- bug: move up/down -> sometimes it does not update the "Found" column - also, sometimes it's not updated at all

- save sets of location/sizes (ctrl-shift-Number -> save, ctrl-Number -> use (toggle)). if full screen, we should just note that
  also, i should save existing location - however if it matches an already saved location, don't save
  perhaps save a few more things -> like whether i have title toggled/and am topmost? TOTHINK, like - save all toggles

- for large files / sync colors -> when switching tab (thus, resync-ing) takes rather long. the best way to do it is to synchronize ONLY the lines that are visible
  (of course, only when full log shown)

- option: if a line doesn't match any logging syntax -> assume it's from previous line (keep it in the context?)










- alert -> allow showing a msg, beep, etc. when a certain msg is found
  for instance "same scrape" -> show a message when that happens
  or, when "overridden theme" gets written (for alerts - force refresh of the view all the time)
  by default -> the alert would show the message itself + perhaps beep?
  alerts - to be also shown in a left pane (as a new tab)
  when an alert happens -and it actually matches the current view - just show the alert sign (no need to show the message itself since the user already sees it)
  --------> when an alert happens, show it in the line number as an "!" icon - also, all views that contain an alert should have the "!" icon
  --------> checkbox - beep on alert + checkbox - bring LogWizard to top on alert
  ----- i should look for an alert in all the filters (in other words, maybe two filters match a line -> the first filter gives the color; but maybe the second one matches the alert)

  - new article (about monitoring your own log while debugging) + "bring to top/most on alt-tab"?

- allow using the surrounding lines - if a $part ends in a number, it's the prev/next line. 
  Example: $msg[2] (the second line from now), $time[-3] (the time 3 lines above), $thread[-12] (the thread 12 lines above)
  allow concatenating of several messages - like: $msg[-1,2] = prev msg + enter + msg + enter + next msg + next+1 msg
  This should be: 
  if "apply to existing lines" is checked -> the lines are only taken from this view
  if "apply to existing lines" is unchecked -> lines are taken from the log












  - ' ' toggle between enabled/dimmed in the filter (if on a filter row)
- 'd' toggle details - this is the beginning of a larger feature -> allow showing details about the message (like, certain columns should show up in the list, and certain in the details - they can overlap)
  if turned on, the msg details is automatically off
  - i should also have a way to toggle msg_details on/off

- 's' - toggle status (info about the file/current view - like, file size, number of lines, how many lines the last Find matched; when loading a file -> write status about it)

- toggles - have them as a single context menu - to be shown at the press of a button or when right-clicking on our "bug" icon
  - when showing the menu, the hotkeys for each toggle, show them in [] , like, [F]ilter Pane
  - include 'm' as well - explain for current view only
  - tooltip -> explain that toggles are shown when right clicking the icon as well
- option to turn off hotkeys

- ctrl-h -> should show history - if the title is toggled off, just bring the history part to visibility, and then hide it back










- settings page: 
  - font for showing the message (like, Courier New?)
  - default color for "Include text"
  - show column "Filter(s)" on full log (it takes more time to synchronize)
  - colors for bookmarks
  - if to add "*" to the tab title when something changed -> this forces refresh of all  tabs all the time

- parse log4net patterns: example: "%-50file(%4line): %date{HH:mm:ss,fff} %-10thread %-5level - %message%newline"
  if a .config file found, read it from there - prefer the pattern after FileAppender

- bug - sometimes refreshing clears the current view (and the view remains cleared) - clicking it a few times will make it work again, but it's not cool

- bug - log_line_parser.line_at can actually cause assertion -> i should be able to handle the case when line_at returns null (and 'matches' should return false in that case)

- level column -> allow transforming it into pictures








- allow editing the message (basically just for copying text) + allow "Exclude [text]" + "Include [text]" (on the Full log)
  -probably listen for keys -> listen for left or right arrow (and start moving cursor from there)
  -> another context menu -> "To Color" -> which converts lines containing that text to a given color
  -------> create a new filter "apply to existing lines"

- save view (ctrl-s) - normalize, allow selecting which rows to save (time, date, etc.)
  - allow saving a certain view as a text file (.txt or .html) -> if html, preserve coloring








- show/hide views altogether -> allow hiding the views that don't interest you at this time
  (you might want to re-show them later, but for now, you don't care about them)
































---------------------------------------------------------------------------------
- how easy is it to draw with custom font, or on special color?

allow bolding or changing font or color or whatever of certain words/phrases
like, color=red for all "could not" text

- (low) log_line_parser.read_to_end - normally, when a line is incomplete and reparsed, we should reapply filters on it, because the line might have become complete now,
  thus, some filters might match now. however, it's not a big deal - normally logs should be flushed correctly (several lines at a time)

allow bolding or changing font or color or whatever of certain regexes?
like, in the message - if X matches Y -> mark it in a certain color or so.
case in point -> [time.stats] -> numbers -> if too big -> mark them in given color
---- at beginning, do this simple, like "match [time.stats] $number ms". Then, allow $number comparisons, like , $number > 100 => color something
























------------- talk with Vidi
- threads - allow showing threads in parallel - based message id - if too many threads, allow choosing which threads to show - sorted by absolute time
- allow copy-paste of full-log into a cloud

- file:line -> allow showing the actual source code , eventually integrate with visual studio, 
  eventually think about root folder / and allow overriding it to your own
  integrate with github/bitbucket for open source projects? - look for api from github/bitbucket for retrieving files
  
- find: allow showing only the lines that matched the find condition (toggle)
- in visual studio -> if i'm at file:line -> go into logwizard and see what messages were written at this file:line -> create a view with those lines or something like that

- find -> convert to a filter 

---------------


- at some point: all commands should be available via menu - which should be turned on/off
