
- dropping a zip file
  - look for .log + .txt files (prefer .log)      ---------> in settings form, allow override (the extrensions are used in preffered order, like, ".log" first if we have ".log;.txt")
    - if a single one found, use it. otherwise:
	  - if shift pressed -> show a dialog with all possible files
	  - if shift not pressed, open the first one (prefer .log)
	- iterate subdirs?
	-------> keep in the history (and basically dropped zip files -> we keep them somewhere in our logwizard subdir + use FRIENDLY NAMES)
	         see that history_ and history combo are in sync, even when we select another item!

- show_notes (ui_info) -> note: this is mutually exclusive with show_filters (probably have something else show_left)
  - need to allow resizing the left pane (splitter) and automatically save that

- take some picture with logwizard - to place on github

- (note_user_ctrl) notes: author (in Settings) - by default, username
  - the author has 2 names - the name + a short name, since we will be showing his shot name in discussions (by default, it's he user's initials -> we compute them as he's changing his name)
  - show the author username when toggled into notes + specify a color for author (by default, blue)
    - when showing the other authors, if an author name's color colides with ours, make sure we use something unique (even if several collisions)
  - allow deleting/UNdeleting notes, even from others (basically, we will HIDE it; hidden notes, if shown, show in ligthtgray) 
    - have a checkbox - show Hidden Notes (by default, unchecked)
  - render: the author, bold -> in author's color , the text in the color wanted by the author
  - when typing a note: first line ( # color) - can specify the color (to make it simpler)

- toggles button + menu!
- context matches -> in settings dialog (easy, for now)






- extra.txt -> when holding it locally -> hold the extra-file_name-md5_of_local_file_path.txt
  - first -> try to find the full md5 - if not, try find the name (in case the file got moved)
  - see about temporary contexts (they should not be saved?)

- allow notes - on any line even if bookmark or not
  - clicking on a note - will take you there - notes are prefixed by username (by default, its the windows username)
  - several people can comment on a line
  - clicking on a note: 
    - see if i have the view where the note was made, and if i have the line. if so, i will go there, in that view (since i may be using my own context)
	- otherwise, go to first view where the note is found, if not found anywhere, open full log and go there
  - notes should be abe to have colors (like - green OK, red BAD, gray ACCEPTED, stuff like that)
    - note color != author color!

- zip it - zip the file + its notes + its bookmarks + its context
  - zip as ".logwizard" extension - we should automatically recognize this (Open With)
  - should we auto-open .zip files? (Open With?) 

- unzip it 
  - if dropping a zip file onto us -> if it contains 2 files (extra.txt and another one) -> load notes/etc. from extra.txt + load the other file
    - this should also work as "double click in explorer"
  - if shift is pressed, override the context, otherwise, we preserve our context.
    if shift is NOT pressed, if we have the context - we preserve our context; if we DON'T have the context, we will load it
  - if context is slightly different and we did not load it, show it in status bar
  - if we do override the context, this is NOT permanent - we will use a temporary context or so

- allow exporting notes:
  - to be sent to customer - the line(s) + the author(s)
  - allow export as .txt or .html
  - also, export to clipboard

  - article: 
    - update existing article
    - sharing thy log with coworkers/customer support/customers (two articles: Share with Coleagues / Customer Support)
	  - customer support - explain that they can have the developers look at the logs as well.

- .logwizard -> if a single file is found (extra.txt) -> parse it for - context settings or filter settings (import them, and say so visually)
  - allow exporting settings like this by default (ToC/FromC -> do this somehow to save to file -> maybe from Settings dialog?)
  - probably both import/export should be done via Settings dialog - if dropped, just ask a question - do you want to import blabla?

















- option: if a line doesn't match any logging syntax -> assume it's from previous line (keep it in the context?; probably - yes)

- alert -> allow showing a msg, beep, etc. when a certain msg is found
  for instance "same scrape" -> show a message when that happens
  or, when "overridden theme" gets written (for alerts - force refresh of the view all the time)
  by default -> the alert would show the message itself + perhaps beep?
  alerts - to be also shown in a left pane (as a new tab)
  when an alert happens -and it actually matches the current view - just show the alert sign (no need to show the message itself since the user already sees it)
  --------> when an alert happens, show it in the line number as an "!" icon - also, all views that contain an alert should have the "!" icon
  --------> checkbox - beep on alert + checkbox - bring LogWizard to top on alert
  ----- i should look for an alert in all the filters (in other words, maybe two filters match a line -> the first filter gives the color; but maybe the second one matches the alert)

  -> alerts - allow an alert to stop the program (have setting: alerts : break into code, default = yes).
     in this case, I need to create a special logger (that writes to shmem). then, use signals - after each log, we wait until the "alert" filters have been run
	 if an alert triggers (one that should be on - if "break into code" is turned off, then an alert must be specifically set to "break"),
	 then we stop the program. otherwise, the program continue
	 in our program -> we first run the 'alert' filters that can break (synchronously) - if anything matches, we signal this. otherwise, we allow the original program
	 (the one being debugged), to continue.
	 (note: see if it's easier to monitor for console)
	 note: when writing to shmem, the log pattern should match what you would write the the file.
	 (shmem -> have a setting - how to identify the beginning of hte program - like, a specific message gets written -> restarts logging)

  - new article (about monitoring your own log while debugging) + "bring to top/most on alt-tab"? "Logging and Debugging - they can get along"

  - alert: email? later = command line client that would monitor a certain log? and just do alerts? (include the msg?)
    - cmd line args: [type-of-log] [log-name]
	- allow dumping one of hte views?
	- TOTHINK when should we dump an email? by default, probably not. maybe only on the command line client?
	- later: in time, allow for this to be very thin (memory-wise), since we don't need to remember the matches - we only need to dump alerts, if needed
	- cmd line client should also be able to dump a certain view into another file (.txt or .html); this way, you might run it on Test results?









- allow using the surrounding lines - if a $part ends in a number, it's the prev/next line. 
  Example: $msg[2] (the second line from now), $time[-3] (the time 3 lines above), $thread[-12] (the thread 12 lines above)
  allow concatenating of several messages - like: $msg[-1,2] = prev msg + enter + msg + enter + next msg + next+1 msg
  This should be: 
  if "apply to existing lines" is checked -> the lines are only taken from this view
  if "apply to existing lines" is unchecked -> lines are taken from the log









- log friendly name -> retest, useful for Denise (also, will be useful in the future, when we'll have several text readers)

- 'd' toggle details - this is the beginning of a larger feature -> allow showing details about the message (like, certain columns should show up in the list, and certain in the details - they can overlap)
  if turned on, the msg details is automatically off
  - i should also have a way to toggle msg_details on/off

- 's' - toggle status (info about the file/current view - like, file size, number of lines, how many lines the last Find matched; when loading a file -> write status about it)

- toggles - have them as a single context menu - to be shown at the press of a button or when right-clicking on our "bug" icon
  - when showing the menu, the hotkeys for each toggle, show them in [] , like, [F]ilter Pane
  - include 'm' as well - explain for current view only
  - tooltip -> explain that toggles are shown when right clicking the icon as well
  - rethink : where do i keep all toggles? (context? or file itself?)
  - write on github - toggles
- option to turn off hotkeys










- loading large files -> optimize logwizard to load stuff 100% in the background, and show in the status bar as we're loading stuff (first file, then filters)

- defaults: retest when using logwizard for first time 
  - by default, MAYBE, we should show levels in color (red=ERROR, darkred=FATAL, etc) - have a setting that if checked(default), we would do that.
    - perhaps we should do htis on small files (like, 50Mb or less)
  - also, Find -> have a button "Append to Filter" or something -> if the view name is "New_...", rename this as the contents of the search or something TOTHINK
  - right click on a column -> have an easy "Filter In/Out" dialog where the user can choose to execute something on that column
    - make sure we can do this with keys - i need to have a way to select a certain column with keys - so that when rightclicking on it, it would then open the Filter In/Out dialog
	  -- i should print the existing selected cell (column) with a slightly darker background (perhaps just use left/right arrows?)
	     probably: by default, there is no cell celected (just the row) - if pressing ->, we'll start selecting from the left-to-right
		                                                                - if pressing <-, we'll start selecting from right-to-left
	- the defaults (to filter IN or OUT) should be based on whether in current view or full log









- settings page: 
  - font for showing the message (like, Courier New?)
  - default color for "Include text"
  - show column "Filter(s)" on full log (it takes more time to synchronize)
  - colors for bookmarks
  - if to add "*" to the tab title when something changed -> this forces refresh of all  tabs all the time

- parse log4net patterns: example: "%-50file(%4line): %date{HH:mm:ss,fff} %-10thread %-5level - %message%newline"
  if a .config file found, read it from there - prefer the pattern after FileAppender

- bug - sometimes refreshing clears the current view (and the view remains cleared) - clicking it a few times will make it work again, but it's not cool

- bug - log_line_parser.line_at can actually cause assertion -> i should be able to handle the case when line_at returns null (and 'matches' should return false in that case)

- level column -> allow transforming it into pictures
  - this should work on any column - we should be able to transform any context into picts

- article: testing with logwizard (command line?) 






- allow editing the message (basically just for copying text) + allow "Exclude [text]" + "Include [text]" (on the Full log)
  -probably listen for keys -> listen for left or right arrow (and start moving cursor from there)
  -> another context menu -> "To Color" -> which converts lines containing that text to a given color
  -------> create a new filter "apply to existing lines"

- save view (ctrl-s) - normalize, allow selecting which rows to save (time, date, etc.)
  - allow saving a certain view as a text file (.txt or .html) -> if html, preserve coloring








- show/hide views altogether -> allow hiding the views that don't interest you at this time
  (you might want to re-show them later, but for now, you don't care about them)










- allow hiding views - in case we have too many (we can show them at any time)
- mark views as "should never happen" - the idea is that we would want something like this:
    - have alerts on this view -> if any alert triggers, show this view - otherwise, keep it hidden
    = run on command line as well?






















---------------------------------------------------------------------------------
- how easy is it to draw with custom font, or on special color?

allow bolding or changing font or color or whatever of certain words/phrases
like, color=red for all "could not" text

- (low) log_line_parser.read_to_end - normally, when a line is incomplete and reparsed, we should reapply filters on it, because the line might have become complete now,
  thus, some filters might match now. however, it's not a big deal - normally logs should be flushed correctly (several lines at a time)

allow bolding or changing font or color or whatever of certain regexes?
like, in the message - if X matches Y -> mark it in a certain color or so.
case in point -> [time.stats] -> numbers -> if too big -> mark them in given color
---- at beginning, do this simple, like "match [time.stats] $number ms". Then, allow $number comparisons, like , $number > 100 => color something












- merging views into a given context (say two people are working on the same context) - you should be able to "import" the other guy's views without screwing your own
  (by default, back the current settings - just in case something goes wrong)
  - so in other words, say my collegue goes to Copy to clipboard a full context -> and sends it to me - I should be able to merge it with myown
  - new views are extremely easy - (I just add them)
  - existing views with different filters -> do i just add the new filters, erase existing ones? not really sure - perhaps a dialogue asking user what to do











------------- talk with Vidi
- threads - allow showing threads in parallel - based message id - if too many threads, allow choosing which threads to show - sorted by absolute time
- allow copy-paste of full-log into a cloud

- file:line -> allow showing the actual source code , eventually integrate with visual studio, 
  eventually think about root folder / and allow overriding it to your own
  integrate with github/bitbucket for open source projects? - look for api from github/bitbucket for retrieving files
  
- find: allow showing only the lines that matched the find condition (toggle)
- in visual studio -> if i'm at file:line -> go into logwizard and see what messages were written at this file:line -> create a view with those lines or something like that

- find -> convert to a filter 

---------------


- at some point: all commands should be available via menu - which should be turned on/off






- finding regex (pro_v) -> allow matching certain numbers etc. from the log lines, and then allow 
  - having charts based on them
  - or toggle on/off the results based on what was matched
  - from the regex -> from each line, we can extract several numbers -> we should be able to name each such number, and create charts based on them.
  - have a wizard that shows how to do this (for instance, on the wizard, take the 1000 first lines, and generate stuff, so that the user can create the chart;
    then, be able to run it on all data.)

- graphs/charts (pro_v?)
  - by default -> on timeline (like, have timeline from start to end, then, show on timeline, when most messages are written)
  - more: allow extracting the data from the lines themselves - like, [time] -> take off the ms from there, and allow showing graph data from there
          (+ ignore the lines that don't match[yes/no] - if yes, we create the graph with only matched data; if no, we create the graph with empty lines where there are no matches)
  - allow zooming on the chart? tothink
  - switching from graph to log and vice versa needs to be ***seamless***
  - while in the chart/graph - i should be able to move with hotkeys as well
  
